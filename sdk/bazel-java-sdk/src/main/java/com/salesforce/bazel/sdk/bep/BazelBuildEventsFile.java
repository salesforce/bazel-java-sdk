package com.salesforce.bazel.sdk.bep;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import com.salesforce.bazel.sdk.logging.LogHelper;

/**
 * Model of a Build Event Protocol (BEP) json file.
 * This file contains the ongoing build events generated by a build or test
 * operation in Bazel. 
 * <p>
 * To enable BEP in your workspace, add this to your .bazelrc:
 *   build --build_event_json_file bep_build.json
 *   test --build_event_json_file bep_test.json
 * Now, whenever you build, Bazel will stream build/test events to those files.
 * <p>
 * BEP is strangely difficult to parse. The contents of the json attributes are 
 * denormalized and not fit for computer consumption.
 * <p>
 * <a href="https://docs.bazel.build/versions/master/build-event-protocol.html">BEP Documentation</a>
 */
public class BazelBuildEventsFile {
    static final LogHelper LOG = LogHelper.log(BazelBuildEventsFile.class);

    private File bepFile;
    private boolean isFinished = false;
    
    // since it is common to want to see the errors in a build, we always populate the list
    private List<BazelBuildEvent> errorEvents = new ArrayList<>();
    
    public BazelBuildEventsFile(File bepFile) {
        this.bepFile = bepFile;
    }
    
    public List<BazelBuildEvent> readEvents(String callerForLog) {
        List<BazelBuildEvent> events = new ArrayList<>();
        int eventIndex = 0;
        
        if (bepFile.length() < 100) {
            // typically, this is a zero length file which happens soon after a build starts (Bazel truncates the file)
            // if there are less than 100 bytes in the file, it means there isn't anything interesting to look at yet 
            // so just cut off our processing early
            LOG.debug(callerForLog+": Halting processing of BEP file "+bepFile.getAbsolutePath()+" because it has a short length of ["+bepFile.length()+"] bytes.");
            return events;
        }
        
        try (BufferedReader b = new BufferedReader(new FileReader(bepFile, Charset.forName("UTF-8")))) {
            String eventString = "";

            LOG.info(callerForLog+": Reading "+bepFile.getAbsolutePath());

            while ((eventString = b.readLine()) != null) {
                //System.out.println("EVENT: "+eventString);
                BazelBuildEvent event = BazelBuildEventTypeManager.parseEvent(eventString, eventIndex);
                if (event != null) {
                    events.add(event);
                    eventIndex++;
                    
                    if (event.isError()) {
                        errorEvents.add(event);
                    }
                    if (event.isLastMessage()) {
                        this.isFinished = true;
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return events;
        } 
        return events;
    }
    
    /**
     * Is the ongoing build/test operation finished, or is it still going?
     */
    public boolean isOperationFinished() {
        return this.isFinished;
    }

    
    public List<BazelBuildEvent> getBuildErrorEvents() {
        return this.errorEvents;
    }
    
    // simple manual test client
    public static void main(String[] args) {
        File bepFile = new File("/tmp/bep_build_success.json");
        BazelBuildEventsFile bazelEventsFile = new BazelBuildEventsFile(bepFile);
        
        List<BazelBuildEvent> events = bazelEventsFile.readEvents("testapp");
        
        for (BazelBuildEvent event : events) {
            System.out.println(event.toString());
        }
    }
}
